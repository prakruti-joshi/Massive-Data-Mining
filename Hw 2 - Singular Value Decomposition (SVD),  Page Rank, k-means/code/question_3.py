# -*- coding: utf-8 -*-
"""pageRank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mBXCm6m-uXReRhqgsITnDulgfEkyptb
"""

import numpy as np

def main(num_itr, beta):
    input_filepath = 'graph.txt'
    num_nodes = 100
    M = np.zeros((num_nodes,num_nodes))
    degree = np.zeros(num_nodes)  # stores the out degrees of each node
    # edges = []

    # Reading edges from file:
    with open(input_filepath, 'r') as f:
        for line in f:
            edge = line.strip().split('\t')   # edge[0] = src node, edge[1] = dest node
            # edges.append(edge)
            src = int(edge[0])-1
            dest = int(edge[1])-1
            M[dest][src] += 1   # Takes care of multiple edges
            degree[src] += 1

    # Calculating the final M matrix
    for j in range(num_nodes):
      for i in range(num_nodes):
        if M[j][i] > 0:
          M[j][i] = M[j][i]/degree[i]
  

    r = np.full(num_nodes,(1.0/num_nodes))
    r_ones = np.ones(num_nodes)
    r_ones = ((1-beta)/(1.0*num_nodes))*r_ones
    r_new = np.zeros(num_nodes)

    # Power iteration
    for itr in range(num_itr):
      r_new = r_ones + beta*(np.dot(M,r))
      r = r_new

    print("Nodes with lowest page rank scores:")
    r_sort = np.argsort(r)
    print("Node ---> Page Rank score")
    for i in range(5):
      print("{0} ---> {1}".format(r_sort[i]+1, r[r_sort[i]]))

    print("******************************************")

    print("Nodes with highest page rank scores:")
    r_desc = np.flip(r_sort)
    print("Node ---> Page Rank score")
    for i in range(5):
      print("{0} ---> {1}".format(r_desc[i]+1, r[r_desc[i]]))

main(40,0.8)

